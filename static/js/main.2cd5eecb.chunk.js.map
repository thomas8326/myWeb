{"version":3,"sources":["constants/api.enum.ts","models/user-info.ts","reducers/login.reducer.tsx","containers/login/login.tsx","components/avatar.tsx","containers/showroom/showroom-card.tsx","components/detail-header.tsx","containers/message/coversation-bubble.tsx","containers/message/conversation.tsx","reducers/conversation.reducer.tsx","middlewares/message-socket.middleware.tsx","utils/useKeyEnter.tsx","containers/message/sender.tsx","models/room.ts","containers/message/conversation-room.tsx","reducers/room.reducer.tsx","containers/message/create-user-button.tsx","containers/message/room.tsx","containers/message/room-list.tsx","containers/message/message.tsx","components/global-header.tsx","containers/showroom/showroom.tsx","App.tsx","reducers/index.tsx","index.tsx"],"names":["ApiPath","UserInfo","name","id","this","LOGIN_USER","initState","loginReducer","state","action","type","object","Login","useState","userName","setUserName","password","setUserPassword","dispatch","useDispatch","history","useHistory","onLogin","userInfo","axios","post","then","response","user","data","payload","push","className","placeholder","value","onInput","event","currentTarget","onClick","Avatar","ShowroomCard","props","title","DetailHeader","onBackClick","LeftOutlined","ConversationBubble","isMine","message","classNames","content","date","Conversation","roomId","useSelector","messages","conversation","map","senderId","RECEIVE_MESSAGE","conversationReducer","newConversation","Object","keys","forEach","key","concat","SEND_MESSAGE","STOMP_CONNECT_ROOM","STOMP_DISCONNECT_ROOM","websocketMiddleware","store","stomp","next","Stomp","over","WebSocket","connect","subscribe","receiveMessage","JSON","parse","body","isNil","disconnect","unsubscribe","msgId","send","stringify","useEnterKey","enterFunction","e","Sender","text","setText","uuidv4","sendMessage","enterKey","onKeyUp","SearchOutlined","Room","participants","ConversationRoom","roomInfo","rooms","find","room","myUserInfo","useEffect","disconnectStomp","CREATE_CHAT_ROOM","GET_CHAT_ROOMS","ADD_ROOM_USER","SET_ROOM_MESSAGE","roomReducer","CreateNewUserButton","isCreateUser","setIsCreateUser","roomName","setRoomName","onCreateRoom","createChatRoom","RobotFilled","CheckCircleFilled","CloseCircleFilled","PlusCircleFilled","ChatRoom","CommentOutlined","ChatRoomList","setRooms","get","getChatRooms","onClickRoom","patch","newParticipants","newRoom","addParticipant","role","tabIndex","onKeyDown","Message","userId","setRoomId","visible","setVisible","wsConnect","aria-label","width","placement","onClose","closable","maskStyle","backgroundColor","destroyOnClose","GlobalHeader","Showroom","App","exact","path","storage","combineReducers","createStore","composeWithDevTools","applyMiddleware","ReduxThunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.2cd5eecb.chunk.js","sourcesContent":["enum ApiPath {\r\n  Room = '/api/rooms',\r\n  Login = '/api/login',\r\n}\r\n\r\nexport default ApiPath;\r\n","class UserInfo {\r\n  id!: string;\r\n\r\n  name!: string;\r\n\r\n  constructor(name: string) {\r\n    this.name = name ?? null;\r\n  }\r\n}\r\n\r\nexport default UserInfo;\r\n","import ReduxAction from 'src/models/action';\r\nimport UserInfo from 'src/models/user-info';\r\n\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\n\r\nconst initState: UserInfo = {\r\n  id: '',\r\n  name: '',\r\n};\r\n\r\nexport function login(user: UserInfo): ReduxAction<UserInfo> {\r\n  return {\r\n    type: LOGIN_USER,\r\n    payload: [],\r\n    object: user,\r\n  };\r\n}\r\n\r\nconst loginReducer = (state = initState, action: ReduxAction<UserInfo>): UserInfo => {\r\n  switch (action.type) {\r\n    case LOGIN_USER:\r\n      return {\r\n        ...state,\r\n        ...action.object,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default loginReducer;\r\n","// imt Action from '@Model/action';\r\n// import UserInfo from '@Model/user-info';\r\n// import { LOGIN_USER } from '@Reducer/login.reducer';\r\nimport axios from 'axios';\r\nimport React, { FormEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\nimport ApiPath from 'src/constants/api.enum';\r\nimport ResponseContent from 'src/models/response-content';\r\nimport UserInfo from 'src/models/user-info';\r\nimport { login } from 'src/reducers/login.reducer';\r\n\r\nfunction Login() {\r\n  const [userName, setUserName] = useState('');\r\n  const [password, setUserPassword] = useState('');\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const onLogin = () => {\r\n    const userInfo = new UserInfo(userName);\r\n\r\n    axios.post<ResponseContent<UserInfo>>(ApiPath.Login, userInfo).then((response) => {\r\n      dispatch(login(response.data.data));\r\n    });\r\n\r\n    history.push('/show-room');\r\n  };\r\n\r\n  return (\r\n    <div className=\"full-layout flex-col flex-center\">\r\n      <div className=\"flex-col flex-center login\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"input-box input-l\"\r\n          placeholder=\"Username\"\r\n          value={userName}\r\n          onInput={(event: FormEvent<HTMLInputElement>) => setUserName(event.currentTarget.value)}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          className=\"input-box input-l\"\r\n          placeholder=\"Password\"\r\n          value={password}\r\n          onInput={(event: FormEvent<HTMLInputElement>) => setUserPassword(event.currentTarget.value)}\r\n        />\r\n        <input type=\"submit\" className=\"input-s\" value=\"submit\" onClick={() => onLogin()} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\n\r\nfunction Avatar() {\r\n  return (\r\n    <div className=\"round\">\r\n      <div className=\"bg-red\" />\r\n      <span>Name</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Avatar;\r\n","import React from 'react';\r\nimport Avatar from 'src/components/avatar';\r\n\r\nfunction ShowroomCard(props: { title: string }) {\r\n  const { title } = props;\r\n\r\n  return (\r\n    <div className=\"flex-row padding-m shadow-card\">\r\n      <Avatar />\r\n      <div>\r\n        <image />\r\n        {title}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ShowroomCard;\r\n","import { LeftOutlined } from '@ant-design/icons';\r\nimport React from 'react';\r\n\r\nfunction DetailHeader(props: { onBackClick: () => void; title: string }) {\r\n  const { onBackClick, title } = props;\r\n  return (\r\n    <div className=\"flex-row flex-align-center padding-m\">\r\n      <LeftOutlined onClick={() => onBackClick()} />\r\n      <span className=\"margin-center title-3\">{title}</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DetailHeader;\r\n","import Message from 'src/models/message';\r\nimport React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nfunction ConversationBubble(props: { message: Message; isMine: boolean }) {\r\n  const { isMine, message } = props;\r\n  return (\r\n    <div className={classNames('bubble', { 'mine-bubble': isMine, 'other-bubble': !isMine })}>\r\n      <div className=\"flex-row flex-align-center\">\r\n        <div className=\"message-text\">{message.content}</div>\r\n        <div className=\"message-time\">{message.date}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConversationBubble;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport ConversationBubble from 'src/containers/message/coversation-bubble';\r\nimport ReduxStorage from 'src/models/storage';\r\n\r\nfunction Conversation(props: { roomId: string }) {\r\n  const { roomId } = props;\r\n  const userInfo = useSelector((state: ReduxStorage) => state.userInfo);\r\n  const messages = useSelector((state: ReduxStorage) => state.conversation[roomId]);\r\n\r\n  return (\r\n    <div className=\"conversation flex-1 flex-col\">\r\n      <div className=\"full-layout\">\r\n        {messages?.map((message) => (\r\n          <ConversationBubble isMine={userInfo.id === message.senderId} message={message} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default Conversation;\r\n","import ReduxAction from 'src/models/action';\r\nimport Conversation from 'src/models/conversation';\r\nimport Message from 'src/models/message';\r\n\r\nconst initState: Conversation = new Conversation();\r\n\r\nexport const RECEIVE_MESSAGE = 'RECEIVE_MESSAGE';\r\n\r\nexport function receiveMessage(message: Message): ReduxAction<Conversation> {\r\n  const newConversation: Conversation = { [message.roomId]: [message] };\r\n\r\n  return {\r\n    type: RECEIVE_MESSAGE,\r\n    payload: [],\r\n    object: newConversation,\r\n  };\r\n}\r\n\r\nconst conversationReducer = (state = initState, action: ReduxAction<Conversation>): Conversation => {\r\n  switch (action.type) {\r\n    case RECEIVE_MESSAGE: {\r\n      const newConversation = state;\r\n      Object.keys(action.object).forEach((key) => {\r\n        newConversation[key] = (newConversation[key] ?? []).concat(action.object[key]);\r\n      });\r\n\r\n      return newConversation;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default conversationReducer;\r\n","import { Middleware } from 'redux';\r\nimport ReduxAction from 'src/models/action';\r\nimport Message from 'src/models/message';\r\nimport ReduxStorage from 'src/models/storage';\r\n// import { receiveMessage } from 'src/reducers/message.reducer';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { CompatClient, Stomp } from '@stomp/stompjs';\r\nimport { isNil } from 'ramda';\r\nimport UserInfo from 'src/models/user-info';\r\nimport { receiveMessage } from 'src/reducers/conversation.reducer';\r\n\r\nexport const WS_CONNECT = 'WS_CONNECT';\r\nexport const WS_DISCONNECT = 'WS_DISCONNECT';\r\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\r\nexport const STOMP_CONNECT_ROOM = 'STOMP_CONNECT_ROOM';\r\nexport const STOMP_DISCONNECT_ROOM = 'STOMP_DISCONNECT_ROOM';\r\n\r\nexport const BROADCAST_MESSAGE = '/all/users';\r\nexport const PRIVATE_MESSAGE = '/chat/room';\r\n\r\nexport const wsConnect = (userId: string): ReduxAction<UserInfo> => ({\r\n  type: 'WS_CONNECT',\r\n  object: { id: userId, name: '' },\r\n  payload: [],\r\n});\r\nexport const wsDisconnect = () => ({ type: 'WS_DISCONNECT' });\r\n\r\nexport function sendMessage(roomId: string, text: string, senderId: string): ReduxAction<Message> {\r\n  return {\r\n    type: SEND_MESSAGE,\r\n    payload: [],\r\n    object: { msgId: uuidv4(), roomId, content: text, senderId },\r\n  };\r\n}\r\n\r\nexport function connectStomp(roomId: string): ReduxAction<Message> {\r\n  return {\r\n    type: STOMP_CONNECT_ROOM,\r\n    payload: [],\r\n    object: { roomId },\r\n  };\r\n}\r\n\r\nexport function disconnectStomp(roomId: string): ReduxAction<Message> {\r\n  return {\r\n    type: STOMP_DISCONNECT_ROOM,\r\n    payload: [],\r\n    object: { roomId },\r\n  };\r\n}\r\n\r\nconst websocketMiddleware: Middleware<{}, ReduxStorage> = (store) => {\r\n  let stomp!: CompatClient;\r\n\r\n  return (next) => (action) => {\r\n    switch (action.type) {\r\n      case WS_CONNECT: {\r\n        stomp = Stomp.over(() => new WebSocket('ws://localhost:8080/chat'));\r\n        stomp.connect(action.object, () => {\r\n          // stomp.subscribe('/all', (message) => store.dispatch(receiveMessage(JSON.parse(message.body))));\r\n          stomp.subscribe('/user/queue/subscribe', (message) =>\r\n            store.dispatch(receiveMessage(JSON.parse(message.body))),\r\n          );\r\n        });\r\n\r\n        break;\r\n      }\r\n      case WS_DISCONNECT:\r\n        if (!isNil(stomp)) {\r\n          stomp.disconnect();\r\n        }\r\n        break;\r\n      case STOMP_CONNECT_ROOM:\r\n        break;\r\n      case STOMP_DISCONNECT_ROOM:\r\n        stomp.unsubscribe(`${PRIVATE_MESSAGE}/${action.object.roomId}`);\r\n        break;\r\n      case SEND_MESSAGE: {\r\n        const message = {\r\n          msgId: action.object.msgId,\r\n          content: action.object.content,\r\n          roomId: action.object.roomId,\r\n          senderId: action.object.senderId,\r\n        };\r\n\r\n        stomp.send(`/chat/room/${message.roomId}`, {}, JSON.stringify(message));\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n    return next(action);\r\n  };\r\n};\r\n\r\nexport default websocketMiddleware;\r\n","import { KeyboardEvent } from 'react';\r\n\r\nconst useEnterKey = (enterFunction: () => void) => (e: KeyboardEvent) => {\r\n  if (e.key === 'Enter') {\r\n    enterFunction();\r\n  }\r\n};\r\n\r\nexport default useEnterKey;\r\n","import { SearchOutlined } from '@ant-design/icons';\r\nimport React, { FormEvent, KeyboardEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { sendMessage } from 'src/middlewares/message-socket.middleware';\r\nimport useEnterKey from 'src/utils/useKeyEnter';\r\n\r\nfunction Sender(props: { roomId: string; senderId: string }) {\r\n  const { senderId, roomId } = props;\r\n  const [text, setText] = useState('');\r\n  const dispatch = useDispatch();\r\n  const send = () => {\r\n    if (text !== '') {\r\n      dispatch(sendMessage(roomId, text, senderId));\r\n      setText('');\r\n    }\r\n  };\r\n  const enterKey = useEnterKey(send);\r\n\r\n  return (\r\n    <div className=\"flex-row sender-box flex-align-center padding-m\">\r\n      <input\r\n        type=\"text\"\r\n        value={text}\r\n        className=\"flex-1\"\r\n        onInput={(e: FormEvent<HTMLInputElement>) => setText(e.currentTarget.value)}\r\n        onKeyUp={(e: KeyboardEvent<HTMLInputElement>) => enterKey(e)}\r\n      />\r\n      <SearchOutlined className=\"icon-m padding-m\" onClick={() => send()} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sender;\r\n","import Message from 'src/models/message';\r\nimport UserInfo from 'src/models/user-info';\r\n\r\nclass Room {\r\n  id!: string;\r\n\r\n  name!: string;\r\n\r\n  participants: UserInfo[] = [];\r\n\r\n  messages: Message[] = [];\r\n\r\n  constructor(id?: string, name?: string, participants: UserInfo[] = [], messages: Message[] = []) {\r\n    this.id = id ?? '';\r\n    this.name = name ?? '';\r\n    this.participants = participants;\r\n    this.messages = messages;\r\n  }\r\n}\r\n\r\nexport default Room;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DetailHeader from 'src/components/detail-header';\r\nimport Conversation from 'src/containers/message/conversation';\r\nimport Sender from 'src/containers/message/sender';\r\nimport { connectStomp, disconnectStomp } from 'src/middlewares/message-socket.middleware';\r\nimport Room from 'src/models/room';\r\nimport ReduxStorage from 'src/models/storage';\r\n\r\nfunction ConversationRoom(props: { roomId: string; onBackClick: (id: string) => void }) {\r\n  const roomInfo: Room = useSelector(\r\n    (state: ReduxStorage) => state.rooms.find((room) => room.id === props.roomId) ?? new Room(),\r\n  );\r\n  const myUserInfo = useSelector((state: ReduxStorage) => state.userInfo);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(connectStomp(props.roomId));\r\n\r\n    return function cleanup() {\r\n      dispatch(disconnectStomp(props.roomId));\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"full-layout flex-col\">\r\n      <DetailHeader onBackClick={() => props.onBackClick('')} title={roomInfo!.name} />\r\n      <Conversation roomId={roomInfo.id ?? ''} />\r\n      <Sender roomId={roomInfo?.id ?? ''} senderId={myUserInfo.id} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConversationRoom;\r\n","import ReduxAction from 'src/models/action';\r\nimport Message from 'src/models/message';\r\nimport Room from 'src/models/room';\r\nimport UserInfo from 'src/models/user-info';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport const CREATE_CHAT_ROOM = 'CREATE_CHAT_ROOM';\r\nexport const GET_CHAT_ROOMS = 'GET_CHAT_ROOMS';\r\nexport const ADD_ROOM_USER = 'ADD_ROOM_USER';\r\nexport const SET_ROOM_MESSAGE = 'SET_ROOM_MESSAGE';\r\nexport const RECEIVE_MESSAGE = 'RECEIVE_MESSAGE';\r\n\r\nconst initState: Room = {\r\n  id: '',\r\n  name: '',\r\n  participants: [],\r\n  messages: [],\r\n};\r\n\r\nexport function createChatRoom(roomName: string) {\r\n  return {\r\n    type: CREATE_CHAT_ROOM,\r\n    payload: [{ id: uuidv4(), roomName }],\r\n  };\r\n}\r\n\r\nexport function getChatRooms(rooms: Room[]) {\r\n  return {\r\n    type: GET_CHAT_ROOMS,\r\n    payload: rooms,\r\n  };\r\n}\r\n\r\nexport function setRoomConversation(room = initState, messages: Message[]): ReduxAction<Room> {\r\n  const newMessages: Message[] = [...room.messages, ...messages];\r\n  const newRoom = { ...room, ...{ messages: newMessages } };\r\n\r\n  return {\r\n    type: SET_ROOM_MESSAGE,\r\n    payload: [],\r\n    object: newRoom,\r\n  };\r\n}\r\n\r\nexport function addParticipant(room: Room, userInfo: UserInfo[]): ReduxAction<Room> {\r\n  const newParticipants: UserInfo[] = room.participants.concat(userInfo);\r\n  const newRoom = { ...room, ...{ participants: newParticipants } };\r\n\r\n  return {\r\n    type: ADD_ROOM_USER,\r\n    payload: [],\r\n    object: newRoom,\r\n  };\r\n}\r\n\r\nconst roomReducer = (state: Room[] = [], action: ReduxAction<Room>): Room[] => {\r\n  switch (action.type) {\r\n    case CREATE_CHAT_ROOM:\r\n      return [...state, ...action.payload];\r\n    case GET_CHAT_ROOMS:\r\n      return action.payload;\r\n    case ADD_ROOM_USER:\r\n    case SET_ROOM_MESSAGE: {\r\n      const rooms = state.map((room) => (room.id === action.object.id ? action.object : room));\r\n      return rooms;\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default roomReducer;\r\n","import React, { FormEvent, useState } from 'react';\r\nimport { CheckCircleFilled, CloseCircleFilled, RobotFilled, PlusCircleFilled } from '@ant-design/icons';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createChatRoom } from 'src/reducers/room.reducer';\r\n\r\nconst CreateNewUserButton = () => {\r\n  const [isCreateUser, setIsCreateUser] = useState(false);\r\n  const [roomName, setRoomName] = useState('');\r\n  const dispatch = useDispatch();\r\n  const onClose = () => {\r\n    setIsCreateUser(false);\r\n    setRoomName('');\r\n  };\r\n  const onCreateRoom = () => {\r\n    dispatch(createChatRoom(roomName));\r\n    onClose();\r\n  };\r\n\r\n  return isCreateUser ? (\r\n    <div className=\"flex-row flex-align-center shadow-card\">\r\n      <RobotFilled className=\"icon-l R-margin-m padding-m\" />\r\n      <input\r\n        className=\"input-box input-f\"\r\n        value={roomName}\r\n        onInput={(e: FormEvent<HTMLInputElement>) => setRoomName(e.currentTarget.value)}\r\n      />\r\n      <CheckCircleFilled className=\"primary icon-m L-margin-m\" onClick={() => onCreateRoom()} />\r\n      <CloseCircleFilled className=\"primary icon-m L-margin-m\" onClick={() => setIsCreateUser(false)} />\r\n    </div>\r\n  ) : (\r\n    <button type=\"button\" className=\"flex-row flex-align-center shadow-card\" onClick={() => setIsCreateUser(true)}>\r\n      <PlusCircleFilled className=\"primary icon-l padding-m\" />\r\n      <span>Create New Chatroom</span>\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default CreateNewUserButton;\r\n","import { CommentOutlined } from '@ant-design/icons';\r\nimport React from 'react';\r\nimport Room from 'src/models/room';\r\n\r\nconst ChatRoom = (props: { room: Room }) => {\r\n  const { room } = props;\r\n  return (\r\n    <div className=\"flex-row flex-align-center shadow-card\">\r\n      <CommentOutlined className=\"padding-m icon-l\" />\r\n      <div>{room.name}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatRoom;\r\n","import axios from 'axios';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ApiPath from 'src/constants/api.enum';\r\nimport CreateNewUserButton from 'src/containers/message/create-user-button';\r\nimport ChatRoom from 'src/containers/message/room';\r\nimport ResponseContent from 'src/models/response-content';\r\nimport Room from 'src/models/room';\r\nimport ReduxStorage from 'src/models/storage';\r\nimport { addParticipant, getChatRooms } from 'src/reducers/room.reducer';\r\n\r\nfunction ChatRoomList(props: { onClick: (id: string) => void }) {\r\n  const [rooms, setRooms] = useState<Room[]>([]);\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    axios.get<ResponseContent<Room[]>>('/api/rooms').then((response) => {\r\n      dispatch(getChatRooms(response.data.data));\r\n      setRooms(response.data.data);\r\n    });\r\n  }, []);\r\n\r\n  const user = useSelector((state: ReduxStorage) => state.userInfo);\r\n\r\n  const onClickRoom = (room: Room) => {\r\n    axios.patch<ResponseContent<Room>>(`${ApiPath.Room}/${room.id}`, user).then((response) => {\r\n      dispatch(addParticipant(room, response.data.data.participants));\r\n      props.onClick(room.id);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"list\">\r\n      {rooms.map((room) => (\r\n        <div\r\n          role=\"button\"\r\n          tabIndex={0}\r\n          key={room.id}\r\n          className=\"B-margin-m\"\r\n          onClick={() => onClickRoom(room)}\r\n          onKeyDown={() => {}}\r\n        >\r\n          <ChatRoom room={room} />\r\n        </div>\r\n      ))}\r\n      <CreateNewUserButton />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatRoomList;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport ConversationRoom from 'src/containers/message/conversation-room';\r\nimport ChatRoomList from 'src/containers/message/room-list';\r\nimport { wsConnect, wsDisconnect } from 'src/middlewares/message-socket.middleware';\r\nimport { Drawer } from 'antd';\r\n\r\nfunction Message(props: { userId: string }) {\r\n  const { userId } = props;\r\n  const [roomId, setRoomId] = useState('');\r\n\r\n  const [visible, setVisible] = useState(false);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (userId) {\r\n      dispatch(wsConnect(userId));\r\n    }\r\n\r\n    return () => {\r\n      dispatch(wsDisconnect());\r\n    };\r\n  }, [userId]);\r\n\r\n  return (\r\n    <div>\r\n      <button type=\"button\" aria-label=\"mute\" className=\"icon-messenger icon-m\" onClick={() => setVisible(true)} />\r\n      <div className=\"flex-row\">\r\n        <Drawer\r\n          width=\"400px\"\r\n          placement=\"right\"\r\n          visible={visible}\r\n          onClose={() => setVisible(false)}\r\n          closable={false}\r\n          maskStyle={{ backgroundColor: 'transparent' }}\r\n          destroyOnClose\r\n        >\r\n          <div className=\"message-content\">\r\n            {roomId === '' ? (\r\n              <ChatRoomList onClick={(id: string) => setRoomId(id)} />\r\n            ) : (\r\n              <ConversationRoom roomId={roomId} onBackClick={() => setRoomId('')} />\r\n            )}\r\n          </div>\r\n        </Drawer>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport Message from 'src/containers/message/message';\r\nimport ReduxStorage from 'src/models/storage';\r\n\r\nfunction GlobalHeader(props: { title: string }) {\r\n  const myUserInfo = useSelector((state: ReduxStorage) => state.userInfo);\r\n  const { title } = props;\r\n\r\n  return (\r\n    <>\r\n      <header className=\"global-header\">\r\n        <div>---</div>\r\n        <span>{title}</span>\r\n        <Message userId={myUserInfo.id} />\r\n      </header>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default GlobalHeader;\r\n","import React from 'react';\r\nimport ShowroomCard from 'src/containers/showroom/showroom-card';\r\nimport GlobalHeader from 'src/components/global-header';\r\n\r\nfunction Showroom() {\r\n  return (\r\n    <>\r\n      <GlobalHeader title=\"Show Room\" />\r\n      <main className=\"full-layout flex-col \">\r\n        <ShowroomCard title=\"123\" />\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Showroom;\r\n","// import Login from 'Containers/login/login';\r\nimport React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Login from 'src/containers/login/login';\r\nimport Showroom from 'src/containers/showroom/showroom';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Login />\r\n        </Route>\r\n        <Route path=\"/show-room\">\r\n          <Showroom />\r\n        </Route>\r\n      </Switch>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { combineReducers } from 'redux';\r\nimport ReduxStorage from 'src/models/storage';\r\nimport conversationReducer from 'src/reducers/conversation.reducer';\r\nimport loginReducer from 'src/reducers/login.reducer';\r\nimport roomReducer from 'src/reducers/room.reducer';\r\n\r\nconst storage = combineReducers<ReduxStorage>({\r\n  userInfo: loginReducer,\r\n  rooms: roomReducer,\r\n  conversation: conversationReducer,\r\n});\r\n\r\nexport default storage;\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './index.scss';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from 'src/App';\r\nimport websocketMiddleware from 'src/middlewares/message-socket.middleware';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport storage from './reducers';\r\n\r\nconst store = createStore(storage, composeWithDevTools(applyMiddleware(ReduxThunk, websocketMiddleware)));\r\n\r\nrender(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}